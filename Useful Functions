1. stoi and related - string to int -> http://www.cplusplus.com/reference/string/
to_string(int val)  ->  convert int to string

2. isdigit(c), isalpha(c), isalnum(c), isupper(c), islower(c), etc -> http://www.cplusplus.com/reference/cctype/

3. rand() returns a number between 0 and 32767

4. *max_element(arr.begin(), arr.end()) and *min_element(arr.begin(), arr.end()) (* because they return iterator) -> <algorithm>

5. If there is %, big multiplication or a chance of overflow then just use lli instead of int.

6. upper_bound(arr.begin(), arr.end(), k) -> returns an iterator to first element greater than k, if none then returns arr.end()
   lower_bound(arr.begin(), arr.end(), k) -> returns an iterator to first element which is not less than k, if none then returns arr.end()

7. binary_search(arr.begin(), arr.end(), k) -> returns true if k is in arr, false otherwise

8. find(arr.begin(), arr.end(), k) -> returns iterator to first element that equals k

9. str.find(string or char, startIdx)  -> http://www.cplusplus.com/reference/string/string/find/
   See Hotel Reviews question in questions folder for example

10. string(size, char) -> make a string of 'char' repeated size times

11. vectors can be compared (lexicographic comparison - for ex. v1 < v2 will give true if v1 is lexicographically smaller)

12. stable_sort(arr.begin(), arr.end(), comp);  // comp is optional

13. find(arr.begin(), arr.end(), valToFind); // returns an iterator to the element if found, arr.end() otherwise.

14. accumulate(arr.begin(), arr.end(), 0); // return sum of whole array and init value (0 here)
    // we can also have minus<int> or a custom binary operation as optional argument at end like accumulate(arr.begin(), arr.end(), 0, bOp)
    // custom operation will be like we do custom comparator for sort or heap

15. next(it, x) -> returns iterator to it + x.     prev(it, x) -> returns iterator to it - x; thest are in <iterator>